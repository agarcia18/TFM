biocManager(pckgName)
install.packages("plotly")
library(ggvis)
ggvis() %>%
# layer_rects(data = data.frame(x=-1.5,y=-1.5, x2 = 1.5, y2 = 1.5), ~x, ~y, x2 = ~x2, y2 = ~ y2, fill:="#000000") %>%
add_track(track_radians, 1, 0.9, fill = ~group, stroke = ~group, fillOpacity := 0.7, fillOpacity.hover := 1) %>%
layer_paths(
data = cnv_line_data %>% group_by(seq), ~ sin(theta) * r, ~ cos(theta) * r, interpolate := "basis",
strokeWidth := 0.8, opacity := ~opac
) %>%
layer_paths(
data = cnv_plot_data %>% group_by(theta), ~ sin(theta) * r, ~ cos(theta) * r, stroke = ~copy_number,
strokeWidth := 2, strokeWidth.hover := 3
) %>%
add_circles(track_radians, r = 0.8 + 2 / 90, opacity := 0.2) %>%
add_track(track_radians, 0.8, 0.6, strokeOpacity := 0.5, stroke := "black", strokeWidth := 0.5) %>%
add_circles(track_radians, seq(0.6, 0.8, length.out = 7)[-c(1, 7)], strokeOpacity := 0.3, strokeWidth := 0.5) %>%
layer_points(
data = snp_plot_data, ~ sin(theta) * r, ~ cos(theta) * r, fill = ~mutation_type, shape = ~is_clinvar,
key := ~id, size = ~is_clinvar, size.hover := 30, strokeOpacity = ~is_clinvar, strokeOpacity.hover := 1,
stroke := "black", strokeWidth := 0.5
) %>%
#     add_links(seq_df = seq_df, data = struct_plot_data, name_from = chr_from, name_to = chr_to,
#               pos_from = chr_from_bkpt, pos_to = chr_to_bkpt, 0.6, 0.6, 0, stroke = ~inter,
#               strokeWidth := 1, strokeWidth.hover := 2) %>%
layer_paths(
data = struct_plot_data, ~ sin(theta) * r, ~ cos(theta) * r, stroke = ~name_from,
strokeWidth := ~opac, strokeWidth.hover := 2, strokeOpacity := 1, interpolate := "basis"
) %>%
layer_text(
data = text_df, ~ sin(theta) * r, ~ cos(theta) * r, text := ~seq, align := "center", baseline := "middle",
angle := ~ 180 * (theta - pi * (cos(theta) < 0)) / pi
) %>%
add_tooltip(tooltip_fun, "hover") %>%
add_tooltip(tooltip_click_fun, "click") %>%
handle_click(click_handle) %>%
#     scale_numeric("x", domain = c(-1, 1), nice = FALSE, clamp = TRUE) %>%
#     scale_numeric("y", domain = c(-1, 1), nice = FALSE, clamp = TRUE) %>%
scale_ordinal("fill", domain = fill_domain, range = fill_range) %>%
scale_ordinal("stroke", domain = stroke_domain, range = stroke_range) %>%
scale_nominal("shape", domain = c("Yes", "No"), range = c("cross", "circle")) %>%
scale_nominal("size", domain = c("Yes", "No"), range = c(20, 10)) %>%
scale_nominal("opacity", domain = c("Yes", "No"), range = c(1, 0)) %>%
hide_axis("x") %>%
hide_axis("y") %>%
hide_legend(c("fill", "stroke", "shape", "size")) %>%
set_options(hover_duration = 0, width = 775, height = 775, keep_aspect = TRUE, duration = 1000) %>%
bind_shiny("plot")
library(ggvis)
ggvis() %>%
# layer_rects(data = data.frame(x=-1.5,y=-1.5, x2 = 1.5, y2 = 1.5), ~x, ~y, x2 = ~x2, y2 = ~ y2, fill:="#000000") %>%
add_track(track_radians, 1, 0.9, fill = ~group, stroke = ~group, fillOpacity := 0.7, fillOpacity.hover := 1) %>%
layer_paths(
data = cnv_line_data %>% group_by(seq), ~ sin(theta) * r, ~ cos(theta) * r, interpolate := "basis",
strokeWidth := 0.8, opacity := ~opac
) %>%
layer_paths(
data = cnv_plot_data %>% group_by(theta), ~ sin(theta) * r, ~ cos(theta) * r, stroke = ~copy_number,
strokeWidth := 2, strokeWidth.hover := 3
) %>%
add_circles(track_radians, r = 0.8 + 2 / 90, opacity := 0.2) %>%
add_track(track_radians, 0.8, 0.6, strokeOpacity := 0.5, stroke := "black", strokeWidth := 0.5) %>%
add_circles(track_radians, seq(0.6, 0.8, length.out = 7)[-c(1, 7)], strokeOpacity := 0.3, strokeWidth := 0.5) %>%
layer_points(
data = snp_plot_data, ~ sin(theta) * r, ~ cos(theta) * r, fill = ~mutation_type, shape = ~is_clinvar,
key := ~id, size = ~is_clinvar, size.hover := 30, strokeOpacity = ~is_clinvar, strokeOpacity.hover := 1,
stroke := "black", strokeWidth := 0.5
) %>%
#     add_links(seq_df = seq_df, data = struct_plot_data, name_from = chr_from, name_to = chr_to,
#               pos_from = chr_from_bkpt, pos_to = chr_to_bkpt, 0.6, 0.6, 0, stroke = ~inter,
#               strokeWidth := 1, strokeWidth.hover := 2) %>%
layer_paths(
data = struct_plot_data, ~ sin(theta) * r, ~ cos(theta) * r, stroke = ~name_from,
strokeWidth := ~opac, strokeWidth.hover := 2, strokeOpacity := 1, interpolate := "basis"
) %>%
layer_text(
data = text_df, ~ sin(theta) * r, ~ cos(theta) * r, text := ~seq, align := "center", baseline := "middle",
angle := ~ 180 * (theta - pi * (cos(theta) < 0)) / pi
) %>%
add_tooltip(tooltip_fun, "hover") %>%
add_tooltip(tooltip_click_fun, "click") %>%
handle_click(click_handle) %>%
#     scale_numeric("x", domain = c(-1, 1), nice = FALSE, clamp = TRUE) %>%
#     scale_numeric("y", domain = c(-1, 1), nice = FALSE, clamp = TRUE) %>%
scale_ordinal("fill", domain = fill_domain, range = fill_range) %>%
scale_ordinal("stroke", domain = stroke_domain, range = stroke_range) %>%
scale_nominal("shape", domain = c("Yes", "No"), range = c("cross", "circle")) %>%
scale_nominal("size", domain = c("Yes", "No"), range = c(20, 10)) %>%
scale_nominal("opacity", domain = c("Yes", "No"), range = c(1, 0)) %>%
hide_axis("x") %>%
hide_axis("y") %>%
hide_legend(c("fill", "stroke", "shape", "size")) %>%
set_options(hover_duration = 0, width = 775, height = 775, keep_aspect = TRUE, duration = 1000) %>%
ggvis() %>%
# layer_rects(data = data.frame(x=-1.5,y=-1.5, x2 = 1.5, y2 = 1.5), ~x, ~y, x2 = ~x2, y2 = ~ y2, fill:="#000000") %>%
add_track(track_radians, 1, 0.9, fill = ~group, stroke = ~group, fillOpacity := 0.7, fillOpacity.hover := 1) %>%
layer_paths(
data = cnv_line_data %>% group_by(seq), ~ sin(theta) * r, ~ cos(theta) * r, interpolate := "basis",
strokeWidth := 0.8, opacity := ~opac
) %>%
layer_paths(
data = cnv_plot_data %>% group_by(theta), ~ sin(theta) * r, ~ cos(theta) * r, stroke = ~copy_number,
strokeWidth := 2, strokeWidth.hover := 3
) %>%
add_circles(track_radians, r = 0.8 + 2 / 90, opacity := 0.2) %>%
add_track(track_radians, 0.8, 0.6, strokeOpacity := 0.5, stroke := "black", strokeWidth := 0.5) %>%
add_circles(track_radians, seq(0.6, 0.8, length.out = 7)[-c(1, 7)], strokeOpacity := 0.3, strokeWidth := 0.5) %>%
layer_points(
data = snp_plot_data, ~ sin(theta) * r, ~ cos(theta) * r, fill = ~mutation_type, shape = ~is_clinvar,
key := ~id, size = ~is_clinvar, size.hover := 30, strokeOpacity = ~is_clinvar, strokeOpacity.hover := 1,
stroke := "black", strokeWidth := 0.5
) %>%
#     add_links(seq_df = seq_df, data = struct_plot_data, name_from = chr_from, name_to = chr_to,
#               pos_from = chr_from_bkpt, pos_to = chr_to_bkpt, 0.6, 0.6, 0, stroke = ~inter,
#               strokeWidth := 1, strokeWidth.hover := 2) %>%
layer_paths(
data = struct_plot_data, ~ sin(theta) * r, ~ cos(theta) * r, stroke = ~name_from,
strokeWidth := ~opac, strokeWidth.hover := 2, strokeOpacity := 1, interpolate := "basis"
) %>%
layer_text(
data = text_df, ~ sin(theta) * r, ~ cos(theta) * r, text := ~seq, align := "center", baseline := "middle",
angle := ~ 180 * (theta - pi * (cos(theta) < 0)) / pi
) %>%
add_tooltip(tooltip_fun, "hover") %>%
add_tooltip(tooltip_click_fun, "click") %>%
handle_click(click_handle) %>%
#     scale_numeric("x", domain = c(-1, 1), nice = FALSE, clamp = TRUE) %>%
#     scale_numeric("y", domain = c(-1, 1), nice = FALSE, clamp = TRUE) %>%
scale_ordinal("fill", domain = fill_domain, range = fill_range) %>%
scale_ordinal("stroke", domain = stroke_domain, range = stroke_range) %>%
scale_nominal("shape", domain = c("Yes", "No"), range = c("cross", "circle")) %>%
scale_nominal("size", domain = c("Yes", "No"), range = c(20, 10)) %>%
scale_nominal("opacity", domain = c("Yes", "No"), range = c(1, 0)) %>%
hide_axis("x") %>%
hide_axis("y") %>%
hide_legend(c("fill", "stroke", "shape", "size")) %>%
set_options(hover_duration = 0, width = 775, height = 775, keep_aspect = TRUE, duration = 1000)
setwd("C:/Users/ainho/eccDNA")
shiny::runApp('Kreis')
runApp('Kreis')
setwd("C:/Users/ainho/eccDNA/Kreis")
runApp()
runApp()
runApp()
runApp()
# Define UI for application that draws a histogram
shinyUI(fluidPage(
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "bootstrap.min.css")),
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
fluidLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
# Define UI for application that draws a histogram
shinyUI(fluidPage(
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "bootstrap.min.css")),
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
splitLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
runApp()
runApp()
install.packages("shinydashboard")
library(shinydashboard)
runApp()
runApp()
runApp()
runApp()
