if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.12")
??ExpressionSet
install.packages("tidyverse")
library(ggplot2)
detach("package:ggplot2", unload = TRUE)
install.packages(c("dplyr", "isoband", "tidyr"))
library(ALL)
if (!requireNamespace("BiocManager",quietly = TRUE))
install.packages("BiocManager")
library("ALL")
library(ALL)
BiocManager::install(c("ALL"))
if (!require("BiocManager"))
+ install.packages("BiocManager") BiocManager::install("Biobase")
if (!require("BiocManager"))
+ install.packages("BiocManager")
BiocManager::install("Biobase")
library("Biobase")
dataDirectory <- system.file("extdata", package="Biobase")
exprsFile <- file.path(dataDirectory, "exprsData.txt")
exprs <- as.matrix(read.table(exprsFile, header=TRUE, sep="\t",
+row.names=1,
+as.is=TRUE))
exprs <- as.matrix(read.table(exprsFile, header=TRUE, sep="\t",row.names=1,as.is=TRUE))
class(exprs)
dim(exprs)
head(exprs[,1:5])
View(exprs)
minimalSet <- ExpressionSet(assayData=exprs)
View(minimalSet)
minimalSet <- ExpressionSet(assayData=exprs)
# Phenotipic Data
pDataFile <- file.path(dataDirectory, "pData.txt")
pData <- read.table(pDataFile,row.names=1, header=TRUE, sep="\t")
class(pData)
class(exprs)
dim(pData)
View(pData)
dim(pData)
dim(exprs)
all(rownames(pData)==colnames(exprs))
dim(pData)
str(pData)
pData[c(15, 20), c("gender", "type")]
metadata <- data.frame(labelDescription=
+ c("Patient gender",
+ "Case/control status",
+ "Tumor progress on XYZ scale"),
+ row.names=c("gender", "type", "score"))
metadata <- data.frame(labelDescription=c("Patient gender","Case/control status","Tumor progress on XYZ scale"),row.names=c("gender", "type", "score"))
View(metadata)
#
metadata <- data.frame(labelDescription=c("Patient gender","Case/control status","Tumor progress on XYZ scale"),row.names=c("gender", "type", "score"))
phenoData <- new("AnnotatedDataFrame",data=pData, varMetadata=metadata)
phenoData
View(phenoData)
View(phenoData)
class(phenoData)
class(minimalSet)
phenoData
View(metadata)
BiocManager::install(c("GEOquery"))
load("~/LISTADO COF.ods")
library(readxl)
LISTADO_COF <- read_excel("LISTADO COF.ods")
View(LISTADO_COF)
library(readxl)
LISTADO_COF <- read_excel("LISTADO COF.xls")
View(LISTADO_COF)
library(readxl)
LISTADO_COF <- read_excel("LISTADO COF.xls")
View(LISTADO_COF)
LISTADO_COF$SEXO==M
LISTADO_COF$SEXO[LISTADO_COF$SEXO=="M"]
LISTADO_COF$SEXO[LISTADO_COF$SEXO=="M"]
table(LISTADO_COF$SEXO)
34+18
34/52
class(phenoData)
class(minimalSet)
head(pData(phenoData))
phenoData@data
pData(phenoData[phenoData$score>0.8,])
pData[pData$score>0.8,]
annotation <- "hgu95av2"
pData(phenoData)
IA
experimentData <- new("MIAME",
+ name="Pierre Fermat",
+ lab="Francis Galton Lab",
+ contact="pfermat@lab.not.exist",
+ title="Smoking-Cancer Experiment",
+ abstract="An example ExpressionSet",
+ url="www.lab.not.exist",
+ other=list(
+ notes="Created from text files"
+ ))
experimentData <- new("MIAME",
+ name="Pierre Fermat",
+ lab="Francis Galton Lab",
+ contact="pfermat@lab.not.exist",
+ title="Smoking-Cancer Experiment",
+ abstract="An example ExpressionSet",
+ url="www.lab.not.exist",
+ other=list(
+ notes="Created from text files"
+ ))
experimentData <- new("MIAME",
+ name="Pierre Fermat",
+ lab="Francis Galton Lab",
+ contact="pfermat@lab.not.exist",
+ title="Smoking-Cancer Experiment",
+ abstract="An example ExpressionSet",
+ url="www.lab.not.exist",
+ other=list(
+ notes="Created from text files"
+ ))
experimentData <- new("MIAME",
+ name="Pierre Fermat",
+ lab="Francis Galton Lab",
+ contact="pfermat@lab.not.exist",
+ title="Smoking-Cancer Experiment",
+ abstract="An example ExpressionSet",
+ url="www.lab.not.exist",
+ other=list(
+ notes="Created from text files"
+))
Da
experimentData <- new("MIAME",
+ name="Pierre Fermat",
+ lab="Francis Galton Lab",
+ contact="pfermat@lab.not.exist",
+ title="Smoking-Cancer Experiment",
+ abstract="An example ExpressionSet",
+ url="www.lab.not.exist",
+ other=list(
+ notes="Created from text files"
+ ))
experimentData <- new("MIAME",
name="Pierre Fermat",
lab="Francis Galton Lab",
contact="pfermat@lab.not.exist",
title="Smoking-Cancer Experiment",
abstract="An example ExpressionSet",
url="www.lab.not.exist",
other=list(notes="Created from text files"))
exampleSet <- ExpressionSet(assayData=exprs,
phenoData=phenoData,
experimentData=experimentData,
annotation="hgu95av2")
exampleSet
exampleSet$gender[1:5]
featureNames(exampleSet)[1:5]
# Accesing to data
exampleSet
exampleSet$gender[1:5]
str(pData)
pData[c(15, 20), c("gender", "type")]
class(phenoData)
class(minimalSet)
# Obsevamos el tipo de datos que tenemos
class(pData)
# Podemos acceder
pData[c(15, 20), c("gender", "type")]
# Podemos acceder
pData[c(15, 20), c("gender", "type")]
# Es importante que coincidan las filas y las columnas de ambos
all(rownames(pData)==colnames(exprs))
head(pData(phenoData))
pData[pData$score>0.8,]
pData(phenoData[phenoData$score>0.8,])
phenoData
class(phenoData)
pdata$score>0.8
pData$score>0.8
# Podemos acceder a la información
head(pData(phenoData))
pData[pData$score>0.8,]
View(pData)
pData[pData$score>0.8,]
# Podemos acceder a la información
head(pData(phenoData))
pData[pData$score>0.8,]
pData(phenoData[phenoData$score>0.8,])
# Consultamos por ejemplo los resultados
table(pData$gender)
# Podemos acceder a la información
table(pData(phenoData))
# Podemos acceder a la información
table(pData$gender(phenoData))
# Podemos acceder a la información
table(pData$gender(phenoData$gender))
# Podemos acceder a la información
table(pData(phenoData$gender))
# Podemos acceder a la información
table(phenoData[phenoData$gender])
pData(phenoData[phenoData$score>0.8,])
# Podemos acceder a la información
table(phenoData$gender)
# Ahora para ver las muestras que tenemos debemos usar
table(phenoData$gender)
# Accesing to data
exampleSet
exampleSet$gender[1:5]
featureNames(exampleSet)[1:5]
# Accesing to data
exampleSet
table(exampleSet$gender)
featureNames(exampleSet)[1:5]
# Si queremos acceder a los datos del expresión
featureNames(exampleSet)[1:5]
minimalSet <- ExpressionSet(assayData=exprs)
knitr::opts_chunk$set(echo = TRUE)
minimalSet <- ExpressionSet(assayData=exprs)
??GEOquery
names(pdata(phenoData))
names(pData(phenoData))
names(exampleSet)
names(exampleSet$phenoData)
exampleSet
exampleSet@assayData
View(exprs)
names(exampleSet)
exampleSet
names(pData(exampleSet))
gds <- getGEO("GSM11805")
library("GEOquery")
gds <- getGEO("GSM11805")
head(Meta(gsm))
gds <- getGEO("GDS507")
gsm <- getGEO("GSM11805")
head(Meta(gsm))
gds
class(gds)
class(gsm)
head(Meta(gsm))
Table(gsm)[1:5,]
Table(gsm)[1]
Table(gsm)
table(gsm)
Table(gsm)
View(gsm)
Columns(gsm)
Columns(gds)[,1:3]
Columns(gds)
eset <- GDS2eSet(gds,do.log2=TRUE)
eset
class(eset)
names(pData(eset))
# Ahora ya podemos trabajar con el
featureNames(eset)
# Ahora ya podemos trabajar con el
head(featureNames(eset))
names(pData(eset))
# Ahora ya podemos trabajar con los datos de expresión
head(featureNames(eset))
# O ver las variables
names(pData(eset))
# Ahora ya podemos ver los datos de expresión o el nombre de las variables
head(featureNames(eset))
names(pData(eset))
pData(eset)[,1:3]
pData(eset)
pData(eset)[,1:2]
pData(eset)[,1:4]
pData(eset)[,1:3]
# Ahora ya podemos ver los datos de expresión o el nombre de las variables
head(featureNames(eset))
myGSE = "GSE3821"
gset <- getGEO(myGSE, GSEMatrix =TRUE)
if (length(gset) > 1) idx <- grep("GPL90", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
class(gset)
ex <- exprs(gset)
str(ex)
# Ahora ya podemos ver los datos de expresión o el nombre de las variables
str(featureNames(eset))
myGSE = "GDS507"
gset <- getGEO(myGSE, GSEMatrix =TRUE)
if (length(gset) > 1) idx <- grep("GPL90", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
class(gset)
ex <- exprs(gset)
pData(eset)[,1:3]
# Ahora ya podemos ver los datos de expresión o el nombre de las variables
str(featureNames(eset))
# Si queremos acceder a los datos del expresión
str(featureNames(exampleSet))
# Si queremos acceder a los datos del expresión
len(featureNames(exampleSet))
# Si queremos acceder a los datos del expresión
dim(featureNames(exampleSet))
# Si queremos acceder a los datos del expresión
str(featureNames(exampleSet))
# Si queremos acceder a los datos del expresión
head(featureNames(exampleSet))
# Ahora ya podemos ver los datos de expresión o el nombre de las variables
head(featureNames(eset))
names(pData(eset))
pData(eset)[,1:3]
# Si tenemos conexión a Internet podemos obtener el archivo directamente con la función getGEO
gds <- getGEO("GDS507")
# Transformamos los archivos a la clase ExpressionSet
eset <- GDS2eSet(gds,do.log2=TRUE)
eset
class(eset)
# Ahora ya podemos ver los datos de expresión o de las variables
head(featureNames(eset))
names(pData(eset))
pData(eset)[,1:3]
install.packages("devtools")
install.packages("roxygen2")
install.packages("tidyverse")
# Load R packages
library(shiny)
install.packages("shiny")
library(shiny); runApp('C:/Users/ainho/OneDrive/Escritorio/MASTER/X-R/Curso Shiny/01_app.R')
runApp('C:/Users/ainho/OneDrive/Escritorio/MASTER/X-R/Curso Shiny/01_app.R')
runApp('C:/Users/ainho/OneDrive/Escritorio/MASTER/X-R/Curso Shiny/01_app.R')
a<-c(9,11,13,20,22,25)
sd(a)
mean(a)
a<-c(9,11,13,20,22,24)
sd(a)
mean(a)
media<-mean(a)
z<-a-media/sd(a)
z<-(a-media)/sd(a)
shiny::runApp('C:/Users/ainho/OneDrive/Escritorio/MASTER/X-R/Curso Shiny/boxes')
setwd("C:/Users/ainho/eccDNA")
runApp('Visual EccDNA')
runApp('Visual EccDNA')
table(circ$chr)
