install.packages("knitr")
install.packages("htmlTable")
install.packages("prettydoc")
install.packages("devtools")
install.packages("BiocManager")
BiocManager::install("oligo")
BiocManager::install("pd.mogene.2.1.st")
BiocManager::install("arrayQualityMetrics")
BiocManager::install("pvca")
# NOT NEEDED UNTIL ANALYSES ARE PERFORMED
BiocManager::install("limma")
BiocManager::install("genefilter")
BiocManager::install("mogene21sttranscriptcluster.db")
BiocManager::install("annotate")
BiocManager::install("org.Mm.eg.db")
BiocManager::install("ReactomePA")
BiocManager::install("reactome.db")
install.packages("knitr")
install.packages("knitr")
BiocManager::install("hgu133plus2.db")
load("C:/Users/ainho/OneDrive/Escritorio/MASTER/Datos_omicos/PEC1/pec1_env.RData")
exp_matrix_norm <- exprs(eset_rma)
manDist <- dist(t(exp_matrix_norm))
heatmap (as.matrix(manDist), col = cm.colors(256))
require(scales)
require(factoextra)
pca <- prcomp(t(exp_matrix_norm))
fviz_eig(pca)
fviz_pca_ind(pca, col.ind = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE
)
boxplot(eset_rma,las=2,  which="all",col=c(rep("darkolivegreen3",6),rep("brown3",6),rep("darkslategray3",6)))
boxplot(eset_rma,las=2,  which="all",col=c(rep("darkolivegreen3",6),rep("brown3",6),rep("darkslategray3",6)))
eset_rma <- rma(rawData)
boxplot(rawData,las=2,  which="all",col=c(rep("darkolivegreen3",6),rep("brown3",6),rep("darkslategray3",6)))
my.targets@data$`"SampleID"`->rownames(pData(rawData))
colnames(rawData) <-rownames(pData(rawData))
head(rawData)
exp_matrix_norm <- exprs(eset_rma)
eset_rma <- rma(rawData)
boxplot(eset_rma,las=2,  which="all",col=c(rep("darkolivegreen3",6),rep("brown3",6),rep("darkslategray3",6)))
boxplot(eset_rma,las=2,  which="all",col=c(rep("darkolivegreen3",6),rep("brown3",6),rep("darkslategray3",6)),main="")
BiocManager::install("hgu95av2.db")
require(genefilter)
require(genefilter)
filtered<-nsFilter (eset_rma,require.entrez=TRUE,remove.dupEntrez=TRUE,var.func=IQR,var.cutoff = 0.5,var.filter = TRUE,filterByQuantile = TRUE,feature.exclude = "^AFFX")
require(genefilter)
filtered<-nsFilter (eset_rma,require.entrez=TRUE,remove.dupEntrez=TRUE,var.func=IQR,var.cutoff = 0.5,var.filter = TRUE,filterByQuantile = TRUE,feature.exclude = "^AFFX")
require(hgu95av2.db)
library(hg95av2.db)
library(hgu95av2.db)
library(org.Hs.eg.db)
BiocManager::install("org.Hs.eg.db")
require(genefilter)
require(hgu95av2.db)
filtered<-nsFilter (eset_rma,require.entrez=TRUE,remove.dupEntrez=TRUE,var.func=IQR,var.cutoff = 0.5,var.filter = TRUE,filterByQuantile = TRUE,feature.exclude = "^AFFX")
BiocManager::install("pd.hg.u133.plus.2.db")
require(genefilter)
require(hgu95av2.db)
filtered<-nsFilter (eset_rma,require.entrez=TRUE,remove.dupEntrez=TRUE,var.func=IQR,var.cutoff = 0.5,var.filter = TRUE,filterByQuantile = TRUE,feature.exclude = "^AFFX")
require((pd.hg.u133.plus.2.db))
require((pd.hg.u133.plus.2.db)
require(genefilter)
require(hgu95av2.db)
require(pd.hg.u133.plus.2.db)
filtered<-nsFilter (eset_rma,require.entrez=TRUE,remove.dupEntrez=TRUE,var.func=IQR,var.cutoff = 0.5,var.filter = TRUE,filterByQuantile = TRUE,feature.exclude = "^AFFX")
require(genefilter)
require(hgu95av2.db)
require(pd.hg.u133.plus.2.db)
filtered<-nsFilter (eset_rma,require.entrez=TRUE,remove.dupEntrez=TRUE,var.func=IQR,var.cutoff = 0.5,var.filter = TRUE,filterByQuantile = TRUE,feature.exclude = "^AFFX")
BiocManager::install("pd.hg.u133.plus.2.db")
require(genefilter)
require(pd.hg.u133.plus.2.db)
filtered<-nsFilter (eset_rma,require.entrez=TRUE,remove.dupEntrez=TRUE,var.func=IQR,var.cutoff = 0.5,var.filter = TRUE,filterByQuantile = TRUE,feature.exclude = "^AFFX")
require(genefilter)
require(pd.hg.u133.plus.2.db)
filtered<-nsFilter (eset_rma,require.entrez=TRUE,remove.dupEntrez=TRUE,var.func=IQR,var.cutoff = 0.5,var.filter = TRUE,filterByQuantile = TRUE,feature.exclude = "^AFFX")
require(pd.hg.u133.plus.2.db)
BiocManager::install("pd.hg.u133.plus.2.db")
require(genefilter)
require(pd.hg.u133.plus.2.db)
filtered<-nsFilter (eset_rma,require.entrez=TRUE,remove.dupEntrez=TRUE,var.func=IQR,var.cutoff = 0.5,var.filter = TRUE,filterByQuantile = TRUE,feature.exclude = "^AFFX")
require(pd.hg.u133.plus.2.db)
BiocManager::install("pd.hg.u133.plus.2.db")
BiocManager::install("hgu95av2cdf")
require(genefilter)
require(hgu95av2cdf)
filtered<-nsFilter (eset_rma,require.entrez=TRUE,remove.dupEntrez=TRUE,var.func=IQR,var.cutoff = 0.5,var.filter = TRUE,filterByQuantile = TRUE,feature.exclude = "^AFFX")
require(pd.hg.u133.plus.2)
require(genefilter)
require(hgu95av2cdf)
require(pd.hg.u133.plus.2)
filtered<-nsFilter (eset_rma,require.entrez=TRUE,remove.dupEntrez=TRUE,var.func=IQR,var.cutoff = 0.5,var.filter = TRUE,filterByQuantile = TRUE,feature.exclude = "^AFFX")
require(genefilter)
require(hgu95av2cdf)
require(pd.hg.u133.plus.2)
filtered<-nsFilter (eset_rma,require.entrez=TRUE,remove.dupEntrez=TRUE,var.func=IQR,var.cutoff = 0.5,var.filter = TRUE,filterByQuantile = TRUE,feature.exclude = "^AFFX")
require(genefilter)
require(hgu95av2cdf)
require(pd.hg.u133.plus.2.db)
filtered<-nsFilter (eset_rma,require.entrez=TRUE,remove.dupEntrez=TRUE,var.func=IQR,var.cutoff = 0.5,var.filter = TRUE,filterByQuantile = TRUE,feature.exclude = "^AFFX")
require(genefilter)
require(hgu95av2cdf)
require(pd.hg.u133.plus.2.db)
filtered<-nsFilter (eset_rma,require.entrez=TRUE,remove.dupEntrez=TRUE,var.func=IQR,var.cutoff = 0.5,var.filter = TRUE,filterByQuantile = TRUE,feature.exclude = "^AFFX")
require(genefilter)
filtered<-nsFilter (eset_rma,require.entrez=TRUE,remove.dupEntrez=TRUE,var.func=IQR,var.cutoff = 0.5,var.filter = TRUE,filterByQuantile = TRUE,feature.exclude = "^AFFX")
require(genefilter)
filtered<-nsFilter (eset_rma,require.entrez=TRUE,remove.dupEntrez=TRUE,var.func=IQR,var.cutoff = 0.5,var.filter = TRUE,filterByQuantile = TRUE,feature.exclude = "^AFFX")
require(genefilter)
library(pd.hg.u133.plus.2.db)
filtered<-nsFilter (eset_rma,require.entrez=TRUE,remove.dupEntrez=TRUE,var.func=IQR,var.cutoff = 0.5,var.filter = TRUE,filterByQuantile = TRUE,feature.exclude = "^AFFX")
require(genefilter)
require(pd.hg.u133.plus.2.db)
annotation(eset_rma) <- "pd.hg.u133.plus.2.db"
filtered<-nsFilter (eset_rma,require.entrez=TRUE,remove.dupEntrez=TRUE,var.func=IQR,var.cutoff = 0.5,var.filter = TRUE,filterByQuantile = TRUE,feature.exclude = "^AFFX")
require(genefilter)
require(pd.hg.u133.plus.2.db)
annotation(eset_rma) <- "pd.hg.u133.plus.2.db"
filtered<-nsFilter (eset_rma,require.entrez=TRUE,remove.dupEntrez=TRUE,var.func=IQR,var.cutoff = 0.5,var.filter = TRUE,filterByQuantile = TRUE,feature.exclude = "^AFFX")
annotation(eset_rma) <- "pd.hg.u133.plus.2.db"
filtered<-nsFilter (eset_rma,require.entrez=TRUE,remove.dupEntrez=TRUE,var.func=IQR,var.cutoff = 0.5,var.filter = TRUE,filterByQuantile = TRUE,feature.exclude = "^AFFX")
require(genefilter)
require(pd.hg.u133.plus.2.db)
annotation(eset_rma) <- "pd.hg.u133.plus.2.db"
filtered <- nsFilter(eset_rma,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE, var.func=IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
require(pd.hg.u133.plus.2.db)
annotation(eset_rma) <- "org.Hs.eg.db"
require(genefilter)
require(org.Hs.eg.db)
annotation(eset_rma) <- "org.Hs.eg.db"
filtered <- nsFilter(eset_rma,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE, var.func=IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
require(genefilter)
require(org.Hs.eg.db)
annotation(eset_rma) <- "org.Hs.eg.db"
filtered <- nsFilter(eset_rma,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE, var.func=IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
require(genefilter)
require(pd.hg.u133.plus.2.db)
annotation(eset_rma) <- "pd.hg.u133.plus.2.db"
filtered <- nsFilter(eset_rma,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE, var.func=IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
BiocManager::install("affycoretools")
library(affycoretools)
eset_anot<- annotateEset(eset_rma, pd.hg.u133.plus.2)
require(genefilter)
filtered <- nsFilter(eset_anot,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE, var.func=IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
eset_anot<- annotateEset(eset_rma, pd.hg.u133.plus.2)
library(pd.hg.u133.plus.2)
eset_anot<- annotateEset(eset_rma, pd.hg.u133.plus.2)
require(genefilter)
library(affycoretools)
library(pd.hg.u133.plus.2)
eset_anot<- annotateEset(eset_rma, pd.hg.u133.plus.2)
library(hgu133plus2.db)
eset_anot<- annotateEset(eset_rma,hgu133plus2.db)
filtered <- nsFilter(eset_anot,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE, var.func=IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
require(genefilter)
library(affycoretools)
library(pd.hg.u133.plus.2)
eset_anot<- annotateEset(eset_rma, pd.hg.u133.plus.2)
library(hgu133plus2.db)
eset_anot<- annotateEset(eset_rma,hgu133plus2.db)
filtered <- nsFilter(eset_anot,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE, var.func=IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
filtered <- nsFilter(eset_rma,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE, var.func=IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
library(pd.hg.u133.plus.2.db)
BiocManager::install("pd.hg.u133.plus.2.db")
require(genefilter)
library(pd.hg.u133.plus.2.db)
filtered <- nsFilter(eset_rma,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE,var.func = IQR(), var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
require(genefilter)
library(pd.hg.u133.plus.2.db)
filtered <- nsFilter(eset_rma,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE,var.func = IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
BiocManager::install("hgu133plus2.db")
require(genefilter)
require(hgu133plus2.db)
filtered <- nsFilter(eset_rma,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE,var.func = IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
require(genefilter)
require(pd.hg.u133.plus2.db)
filtered <- nsFilter(eset_rma,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE,var.func = IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
require(genefilter)
require(pd.hg.u133.plus2.db)
filtered <- nsFilter(eset_rma,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE,var.func = IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
BiocManager::install("pd.hg.u133,plus.2.db")
require(pd.hg.u133.plus2.db)
BiocManager::install("pd.hg.u133,plus.2.db")
BiocManager::install("hgu133plus2.db")
require(genefilter)
require(pd.hg.u133.plus2.db)
filtered <- nsFilter(eset_rma,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE,var.func = IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
require(genefilter)
require(hgu133plus2.db)
filtered <- nsFilter(eset_rma,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE,var.func = IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
install.packages(c("bitops", "haven", "RSQLite"))
require(genefilter)
require(hgu133plus2.db)
filtered <- nsFilter(eset_rma,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE,var.func = IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
require(pd.hg.u133.plus2.db)
require(hgu133plus2.db)
filtered <- nsFilter(eset_rma,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE,var.func = IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
BiocManager::install("pd.hg.u133.plus.2.db")
require(pd.hg.u133.plus.2.db)
require(pd.hg.u133.plus.2)
filtered <- nsFilter(eset_rma,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE,var.func = IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
require(genefilter)
require(pd.hg.u133.plus.2)
filtered <- nsFilter(eset_rma,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE,var.func = IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
library(pd.hg.u133.plus.2.db)
require(genefilter)
require(pd.hg.u133.plus.2.db)
filtered <- nsFilter(eset_rma,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE,var.func = IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
require(genefilter)
require(pd.hg.u133.plus.2.db)
annotation(eset_rma) <- "pd.hg.u133.plus.2.db"
filtered <- nsFilter(eset_rma,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE,var.func = IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
require(genefilter)
require(pd.hg.u133.plus.2.db)
annotation(eset_rma) <- "pd.hg.u133.plus.2.db"
filtered <- nsFilter(eset_rma,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE,var.func = IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
annotation(eset_rma) <- "pd.hg.u133.plus.2.db"
filtered <- nsFilter(eset_rma,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE,var.func = IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
require(genefilter)
require(pd.hg.u133.plus.2.db)
annotation(eset_rma) <- "pd.hg.u133.plus.2.db"
filtered <- nsFilter(eset_rma,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE,var.func = IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
require(genefilter)
require(pd.hg.u133.plus.2.db)
annotation(eset_rma) <- "pd.hg.u133.plus.2.db"
filtered <- nsFilter(eset_rma,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE,var.func = IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
require(genefilter)
require(pd.hg.u133.plus.2.db)
annotation(eset_rma) <- "pd.hg.u133.plus.2.db"
filtered <- nsFilter(eset_rma,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE,var.func = IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
require(genefilter)
require(pd.hg.u133.plus.2.db)
annotation(eset_rma) <- "pd.hg.u133.plus.2.db"
filtered <- nsFilter(eset_rma,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE,var.func = IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
require(genefilter)
require(pd.hg.u133.plus.2.db)
annotation(eset_rma) <- "pd.hg.u133.plus.2.db"
filtered <- nsFilter(eset_rma,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE,var.func = IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
require(genefilter)
require(pd.hg.u133.plus.2.db)
annotation(eset_rma) <- "pd.hg.u133.plus.2.db"
filtered <- nsFilter(eset_rma,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE,var.func = IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
require(genefilter)
require(pd.hg.u133.plus.2.db)
annotation(eset_rma) <- "pd.hg.u133.plus.2.db"
filtered <- nsFilter(eset_rma,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE,var.func = IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
require(genefilter)
require(pd.hg.u133.plus.2.db)
annotation(eset_rma) <- "pd.hg.u133.plus.2.db"
filtered <- nsFilter(eset_rma,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE,var.func = IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
require(genefilter)
require(pd.hg.u133.plus.2.db)
annotation(eset_rma) <- "pd.hg.u133.plus.2.db"
filtered <- nsFilter(eset_rma,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE,var.func = IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
require(genefilter)
require(pd.hg.u133.plus.2)
annotation(eset_rma) <- "pd.hg.u133.plus.2.db"
filtered <- nsFilter(eset_rma,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE,var.func = IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
require(genefilter)
require(pd.hg.u133.plus.2)
annotation(eset_rma) <- "pd.hg.u133.plus.2.db"
filtered <- nsFilter(eset_rma,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE,var.func = IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
require(genefilter)
require(pd.hg.u133.plus.2.db)
annotation(eset_rma) <- "pd.hg.u133.plus.2.db"
filtered <- nsFilter(eset_rma,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE,var.func = IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
require(genefilter)
require(pd.hg.u133.plus.2.db)
annotation(eset_rma) <- "pd.hg.u133.plus.2.db"
filtered <- nsFilter(eset_rma,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE,var.func = IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
require(genefilter)
require(pd.hg.u133.plus.2.db)
require(pd.hg.u133.plus.2)
annotation(eset_rma) <- "pd.hg.u133.plus.2.db"
filtered <- nsFilter(eset_rma,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE,var.func = IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
require(genefilter)
require(pd.hg.u133.plus.2)
annotation(eset_rma) <- "pd.hg.u133.plus.2.db"
filtered <- nsFilter(eset_rma,
require.entrez = TRUE, remove.dupEntrez = TRUE,
var.filter=TRUE,var.func = IQR, var.cutoff=0.75,
filterByQuantile=TRUE, feature.exclude = "^AFFX")
BiocManager::install("pd.hg.u133.plus.2.db")
setwd("C:/Users/ainho/eccDNA")
install.packages(c("bitops", "boot", "curl", "ellipsis", "gh", "MASS", "openssl", "processx", "rlang", "tidyselect", "vctrs"))
remotes::install_github("ropenscy/plotly")
remotes::install_github("ropensci/plotly")
library(shiny)
# cache computation of a correlation matrix
correlation <- round(cor(mtcars), 3)
ui <- fluidPage(
mainPanel(
plotlyOutput("heat"),
plotlyOutput("scatterplot")
),
verbatimTextOutput("selection")
)
server <- function(input, output, session) {
output$heat <- renderPlotly({
plot_ly(source = "heatmap") %>%
add_heatmap(
x = names(mtcars),
y = names(mtcars),
z = correlation
) %>%
layout(
xaxis = list(title = ""),
yaxis = list(title = "")
)
})
output$selection <- renderPrint({
s <- event_data("plotly_click", source = "heatmap")
if (length(s) == 0) {
"Click on a cell in the heatmap to display a scatterplot"
} else {
cat("You selected: \n\n")
as.list(s)
}
})
output$scatterplot <- renderPlotly({
clickData <- event_data("plotly_click", source = "heatmap")
if (is.null(clickData)) return(NULL)
# get the clicked x/y variables and fit model to those 2 vars
vars <- c(clickData[["x"]], clickData[["y"]])
d <- setNames(mtcars[vars], c("x", "y"))
yhat <- fitted(lm(y ~ x, data = d))
# scatterplot with fitted line
plot_ly(d, x = ~x) %>%
add_markers(y = ~y) %>%
add_lines(y = ~yhat) %>%
layout(
xaxis = list(title = clickData[["x"]]),
yaxis = list(title = clickData[["y"]]),
showlegend = FALSE
)
})
}
shinyApp(ui, server, options = list(display.mode = "showcase"))
# cache computation of a correlation matrix
correlation <- round(cor(mtcars), 3)
ui <- fluidPage(
mainPanel(
plotlyOutput("heat"),
plotlyOutput("scatterplot")
),
verbatimTextOutput("selection")
)
library(plotly)
library(shiny)
# cache computation of a correlation matrix
correlation <- round(cor(mtcars), 3)
ui <- fluidPage(
mainPanel(
plotlyOutput("heat"),
plotlyOutput("scatterplot")
),
verbatimTextOutput("selection")
)
server <- function(input, output, session) {
output$heat <- renderPlotly({
plot_ly(source = "heatmap") %>%
add_heatmap(
x = names(mtcars),
y = names(mtcars),
z = correlation
) %>%
layout(
xaxis = list(title = ""),
yaxis = list(title = "")
)
})
output$selection <- renderPrint({
s <- event_data("plotly_click", source = "heatmap")
if (length(s) == 0) {
"Click on a cell in the heatmap to display a scatterplot"
} else {
cat("You selected: \n\n")
as.list(s)
}
})
output$scatterplot <- renderPlotly({
clickData <- event_data("plotly_click", source = "heatmap")
if (is.null(clickData)) return(NULL)
# get the clicked x/y variables and fit model to those 2 vars
vars <- c(clickData[["x"]], clickData[["y"]])
d <- setNames(mtcars[vars], c("x", "y"))
yhat <- fitted(lm(y ~ x, data = d))
# scatterplot with fitted line
plot_ly(d, x = ~x) %>%
add_markers(y = ~y) %>%
add_lines(y = ~yhat) %>%
layout(
xaxis = list(title = clickData[["x"]]),
yaxis = list(title = clickData[["y"]]),
showlegend = FALSE
)
})
}
shinyApp(ui, server, options = list(display.mode = "showcase"))
