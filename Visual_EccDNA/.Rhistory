head(mpg)
g <- ggplot(mpg, aes( x = displ, y = cty, color = hwy)
library(ggplot2)
library(ggiraph)
head(mpg)
g <- ggplot(mpg, aes( x = displ, y = cty, color = hwy))
library(ggplot2)
library(ggiraph)
head(mpg)
g <- ggplot(mpg, aes( x = displ, y = cty, color = hwy))
my_gg <- g + geom_point_interactive(aes(tooltip = model), size = 2)
ggiraph(code = print(my_gg) )
library(ggplot2)
library(ggiraph)
head(mpg)
g <- ggplot(mpg, aes( x = displ, y = cty, color = hwy))
my_gg <- g + geom_point_interactive(aes(tooltip = model), size = 2)
ggiraph(code = print(my_gg) )
my_gg <- g + geom_point_interactive(
aes(tooltip = model, data_id = model), size = 2)
ggiraph(code = print(my_gg), hover_css = "cursor:pointer;fill:red;stroke:red;")
head(circ)
setwd("~/")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
Sys.which("make")
install.packages(c("devtools", "pkgload", "RSQLite", "tidytext", "vctrs"))
install.packages(c("devtools", "pkgload", "RSQLite", "tidytext", "vctrs"))
install.packages(c("devtools", "pkgload", "RSQLite", "tidytext", "vctrs"))
install.packages(c("devtools", "pkgload", "RSQLite", "tidytext", "vctrs"))
install.packages(c("devtools", "pkgload", "RSQLite", "tidytext", "vctrs"))
install.packages(c("devtools", "pkgload", "RSQLite", "tidytext", "vctrs"))
install.packages(c("devtools", "pkgload", "RSQLite", "tidytext", "vctrs"))
install.packages(c("devtools", "pkgload", "RSQLite", "tidytext", "vctrs"))
install.packages(c("devtools", "pkgload", "RSQLite", "tidytext", "vctrs"))
View(circ)
if(!(require(tidyverse))) install.packages("tidyverse")
require(tidyverse)
circ <- as.data.frame(read.table("C:/Users/ainho/eccDNA/BED/SRR6315424_unknown_circle.bed",header = FALSE, sep="\t",stringsAsFactors=FALSE))
# Change names
names(circ)[1] <- "chr"
names(circ)[2] <- "start"
names(circ)[3] <- "end"
names(circ)[4] <- "discordant_reads"
names(circ)[5] <- "split_reads"
names(circ)[6] <- "score"
names(circ)[7] <- "coverage_mean"
names(circ)[8] <- "coverage_sd"
names(circ)[9] <- "coverage_start"
names(circ)[10] <- "coverage_end"
names(circ)[11] <- "coverage_cont"
# Add circle number
circ <- circ %>% mutate(circle_number = 1:n()) %>% select(circle_number, everything())
# Set chr as factor
circ$chr <- substr(circ$chr, start = 1, stop = 5)
circ$chr<-str_remove(circ$chr,"_")
circ$chr<-str_remove(circ$chr,"chr")
circ$chr <- factor(circ$chr, levels = c("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","Un","M","X","Y"))
# Add quality levels (score < 10 = bad, score < 50 = low, score < 200 = medium, score > 200 = high)
circ$quality <- cut(circ$score,breaks=c(-Inf,10,50,200,Inf),labels= c("bad","low", "medium", "good"),right = FALSE)
# Add size of circle (number of bp)
size_bp <- circ$end - circ$start
circ<- add_column(circ,size_bp)
head(circ)
circ %>% select(quality)%>% distinct() %>% arrange(quality)
total_circles<-circ %>% count()
p_bad <-((circ %>% filter (quality=="bad") %>% count())/total_circles)*100
p_low <- ((circ %>% filter(quality=="low") %>% count())/total_circles)*100
p_medium <- ((circ %>% filter(quality=="medium") %>% count())/total_circles)*100
p_good <- ((circ %>% filter(quality=="good") %>% count())/total_circles)*100
circ %>% select(chr)%>% distinct() %>% arrange(chr)
circ %>% filter(quality=="medium")
library(ggplot2)
library(ggiraph)
g <- ggplot(mpg, aes( x = displ, y = cty, color = hwy))
my_gg <- g + geom_point_interactive(aes(tooltip = model), size = 2)
ggiraph(code = print(my_gg) )
my_gg <- g + geom_point_interactive(
aes(tooltip = model, data_id = model), size = 2)
ggiraph(code = print(my_gg), hover_css = "cursor:pointer;fill:red;stroke:red;")
filter_circ <- circ %>% filter(quality=="medium")
cir_good <- circ %>% filter (quality=="good")
filter_circ<- union(circ_medium,circ_good)
circ_medium <- circ %>% filter(quality=="medium")
circ_good <- circ %>% filter (quality=="good")
filter_circ<- union(circ_medium,circ_good)
View(filter_circ)
library(ggplot2)
library(ggiraph)
g <- ggplot(filter_circ, aes( x = size_bp, y = coverage_cont, color = chr))
my_gg <- g + geom_point_interactive(aes(tooltip = split_reads), size = 2)
ggiraph(code = print(my_gg) )
my_gg <- g + geom_point_interactive(
aes(tooltip = model, data_id = model), size = 2)
ggiraph(code = print(my_gg), hover_css = "cursor:pointer;fill:red;stroke:red;")
library(ggplot2)
library(ggiraph)
g <- ggplot(filter_circ, aes( x = size_bp, y = coverage_cont, color = chr))
my_gg <- g + geom_point_interactive(aes(tooltip = split_reads), size = 2)
ggiraph(code = print(my_gg) )
my_gg <- g + geom_point_interactive(aes(tooltip = split_reads), size = 2)
ggiraph(code = print(my_gg), hover_css = "cursor:pointer;fill:red;stroke:red;")
shiny::runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
g<-ggplot(circ, aes( x = size_bp, y = coverage_cont))
`
g<-ggplot(circ, aes( x = size_bp, y = coverage_cont))
g
ggplot(circ, aes( x = size_bp, y = coverage_cont))
ggplot(circ, aes( x = size_bp, y = coverage_cont),
geom_point())
ggplot(circ, aes( x = size_bp, y = coverage_cont)+
geom_point())
ggplot(circ, aes( x = size_bp, y = coverage_cont))
+ geom_point())
ggplot(circ, aes( x = size_bp, y = coverage_cont))
+ geom_point()
ggplot(circ, aes( x = size_bp, y = coverage_cont))+
geom_point()
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
View(circ)
ggplot(circ, aes( x = size_bp, y = split_reads))+
geom_point()
ggplot(circ, aes( x = size_bp, y = split_reads,color=coverage_cont))+
geom_point()
ggplot(circ, aes( x = size_bp, y = coverage_cont,color=split_reads))+
geom_point()
ggplot(circ, aes( x = size_bp, y = coverage_cont,color=discordant_reads))+
geom_point()
ggplot(circ, aes( x = size_bp, y = coverage_cont,color=quality))+
geom_point()
ggplot(filter_circ, aes( x = size_bp, y = size,color=quality))+
geom_point()
ggplot(filter_circ, aes( x = coverage_mean, y = size ,color=quality))+
geom_point()
ggplot(filter_circ, aes( x = coverage_mean, y = size_bp ,color=quality))+
geom_point()
ggplot(filter_circ, aes( x = size_bp, y = coverage_cont,color=quality))+
geom_point()
ggplot(filter_circ, aes( x = size_bp, y = coverage_cont,color=coverage_mean))+
geom_point()
ggplot(filter_circ, aes( x = size_bp, y = coverage_cont,color=coverage_sd))+
geom_point()
ggplot(filter_circ, aes( x = size_bp, y = coverage_cont,color=discordant_reads))+
geom_point()
ggplot(circ, aes( x = discordant_reads))+
geom_dotplot()
ggplot(circ %>% filter(discordant_reads < 1000), aes( x = discordant_reads))+
geom_dotplot()
ggplot(circ %>% filter(size_bp < 1000), aes( x = discordant_reads))+
geom_dotplot()
ggplot(circ %>% filter(size_bp < 1000), aes( x = discordant_reads))+
geom_hist()
ggplot(circ %>% filter(size_bp < 1000), aes( x = discordant_reads))+
geom_histogram()
ggplot(circ %>% filter(discordant_reads < 1000), aes( x = discordant_reads))+
geom_histogram()
ggplot(circ %>% filter(discordant_reads < 100), aes( x = discordant_reads))+
geom_histogram()
ggplot(circ %>% filter(discordant_reads < 10), aes( x = discordant_reads))+
geom_histogram()
ggplot(circ %>% filter(discordant_reads < 50), aes( x = discordant_reads))+
geom_histogram()
ggplot(filter_circ %>% filter(discordant_reads < 50), aes( x = discordant_reads))+
geom_histogram()
ggplot(filter_circ %>% filter(discordant_reads < 100), aes( x = discordant_reads))+
geom_histogram()
ggplot(filter_circ %>% filter(discordant_reads < 1000), aes( x = discordant_reads))+
geom_histogram()
ggplot(filter_circ %>% filter(discordant_reads < 100), aes( x = discordant_reads))+
geom_histogram()
ggplot(filter_circ %>% filter(discordant_reads 5 > | discordant_reads < 100), aes( x = discordant_reads))+
ggplot(filter_circ %>% filter(discordant_reads > 5 | discordant_reads < 100), aes( x = discordant_reads))+
geom_histogram()
a<-filter_circ %>% filter(discordant_reads > 5 | discordant_reads < 100)
ggplot(a, aes( x = discordant_reads))+
geom_histogram()
a<-filter_circ %>% filter(discordant_reads < 100)
a<-filter_circ %>% filter(discordant_reads < 100)
ggplot(a, aes( x = discordant_reads))+
geom_histogram()
a<-filter_circ %>% filter(!between(discordant_reads,5, 100))
a<-filter_circ %>% filter(!between(discordant_reads,5, 100))
ggplot(a, aes( x = discordant_reads))+
geom_histogram()
a<-filter_circ %>% filter(!between(discordant_reads,5, 100))
a<-filter_circ %>% filter(!between(discordant_reads,5, 100))
ggplot(a, aes( x = discordant_reads))+
geom_histogram()
a<-filter(filter_circ, !between(discordant_reads,5, 100))
ggplot(a, aes( x = discordant_reads))+
geom_histogram()
a<- filter(filter_circ, !between(discordant_reads,5, 100))
ggplot(a, aes( x = discordant_reads))+
geom_histogram()
a<- circ_good %>%
filter(discordant_reads > 5 | discordant_reads < 100)
if(!(require(tidyverse))) install.packages("tidyverse")
require(tidyverse)
circ <- as.data.frame(read.table("C:/Users/ainho/eccDNA/BED/SRR6315424_unknown_circle.bed",header = FALSE, sep="\t",stringsAsFactors=FALSE))
# Change names
names(circ)[1] <- "chr"
names(circ)[2] <- "start"
names(circ)[3] <- "end"
names(circ)[4] <- "discordant_reads"
names(circ)[5] <- "split_reads"
names(circ)[6] <- "score"
names(circ)[7] <- "coverage_mean"
names(circ)[8] <- "coverage_sd"
names(circ)[9] <- "coverage_start"
names(circ)[10] <- "coverage_end"
names(circ)[11] <- "coverage_cont"
# Add circle number
circ <- circ %>% mutate(circle_number = 1:n()) %>% select(circle_number, everything())
# Set chr as factor
circ$chr <- substr(circ$chr, start = 1, stop = 5)
circ$chr<-str_remove(circ$chr,"_")
circ$chr<-str_remove(circ$chr,"chr")
circ$chr <- factor(circ$chr, levels = c("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","Un","M","X","Y"))
# Add quality levels (score < 10 = bad, score < 50 = low, score < 200 = medium, score > 200 = high)
circ$quality <- cut(circ$score,breaks=c(-Inf,10,50,200,Inf),labels= c("bad","low", "medium", "good"),right = FALSE)
# Add size of circle (number of bp)
size_bp <- circ$end - circ$start
circ<- add_column(circ,size_bp)
head(circ)
total_circles<-circ %>% count()
p_bad <-((circ %>% filter (quality=="bad") %>% count())/total_circles)*100
p_low <- ((circ %>% filter(quality=="low") %>% count())/total_circles)*100
p_medium <- ((circ %>% filter(quality=="medium") %>% count())/total_circles)*100
p_good <- ((circ %>% filter(quality=="good") %>% count())/total_circles)*100
circ %>% select(chr)%>% distinct() %>% arrange(chr)
ggplot(filter_circ, aes( x = coverage_mean, y = size_bp ,color=quality))+
geom_point()
if(!(require(tidyverse))) install.packages("tidyverse")
require(tidyverse)
circ <- as.data.frame(read.table("C:/Users/ainho/eccDNA/BED/SRR6315424_unknown_circle.bed",header = FALSE, sep="\t",stringsAsFactors=FALSE))
# Change names
names(circ)[1] <- "chr"
names(circ)[2] <- "start"
names(circ)[3] <- "end"
names(circ)[4] <- "discordant_reads"
names(circ)[5] <- "split_reads"
names(circ)[6] <- "score"
names(circ)[7] <- "coverage_mean"
names(circ)[8] <- "coverage_sd"
names(circ)[9] <- "coverage_start"
names(circ)[10] <- "coverage_end"
names(circ)[11] <- "coverage_cont"
# Add circle number
circ <- circ %>% mutate(circle_number = 1:n()) %>% select(circle_number, everything())
# Set chr as factor
circ$chr <- substr(circ$chr, start = 1, stop = 5)
circ$chr<-str_remove(circ$chr,"_")
circ$chr<-str_remove(circ$chr,"chr")
circ$chr <- factor(circ$chr, levels = c("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","Un","M","X","Y"))
# Add quality levels (score < 10 = bad, score < 50 = low, score < 200 = medium, score > 200 = high)
circ$quality <- cut(circ$score,breaks=c(-Inf,10,50,200,Inf),labels= c("bad","low", "medium", "good"),right = FALSE)
# Add size of circle (number of bp)
size_bp <- circ$end - circ$start
circ<- add_column(circ,size_bp)
head(circ)
total_circles<-circ %>% count()
p_bad <-((circ %>% filter (quality=="bad") %>% count())/total_circles)*100
p_low <- ((circ %>% filter(quality=="low") %>% count())/total_circles)*100
p_medium <- ((circ %>% filter(quality=="medium") %>% count())/total_circles)*100
p_good <- ((circ %>% filter(quality=="good") %>% count())/total_circles)*100
circ %>% select(chr)%>% distinct() %>% arrange(chr)
library(ggplot2)
library(ggiraph)
g <- ggplot(circ, aes( x = size_bp, y = coverage_cont))
my_gg <- g + geom_point_interactive(aes(tooltip = split_reads), size = 2)
ggiraph(code = print(my_gg) )
my_gg <- g + geom_point_interactive(aes(tooltip = split_reads), size = 2)
ggiraph(code = print(my_gg), hover_css = "cursor:pointer;fill:red;stroke:red;")
a<- circ_good %>%
filter(discordant_reads > 5 | discordant_reads < 100)
circ_medium <- circ %>% filter(quality=="medium")
if(!(require(tidyverse))) install.packages("tidyverse")
require(tidyverse)
circ_medium <- circ %>% filter(quality=="medium")
circ_good <- circ %>% filter (quality=="good")
filter_circ<- union(circ_medium,circ_good)
ggplot(filter_circ, aes( x = coverage_mean, y = size_bp ,color=quality))+
geom_point()
ggplot(filter_circ, aes( x = coverage_cont, y = size_bp ,color=quality))+
geom_point()
ggplot(filter_circ, aes( x = size_bp, y = coverage_cont ,color=quality))+
geom_point()+
scale
ggplot(filter_circ, aes( x = size_bp, y = coverage_cont ,color=quality))+
geom_point()+
scale_x_continuous(breaks=c(100,500,1000,2000,5000,100000,1000000))
ggplot(filter_circ, aes( x = size_bp, y = coverage_cont ,color=quality))+
geom_point()+
scale_x_continuous(breaks=c(100,500,1000,2000,5000,100000,1000000,100000000))
ggplot(filter_circ, aes( x = size_bp, y = coverage_cont ,color=quality))+
geom_point()
install.packages("plotly")
library(ggplot2)
library(ggiraph)
g <- ggplot(circ, aes( x = size_bp, y = coverage_cont))
my_gg <- g + geom_point_interactive(aes(tooltip = split_reads), size = 2)
ggiraph(code = print(my_gg) )
my_gg <- g + geom_point_interactive(aes(tooltip = split_reads), size = 2)
ggiraph(code = print(my_gg), hover_css = "cursor:pointer;fill:red;stroke:red;")
shiny::runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
ggplot(circ, aes( x = size_bp, y = coverage_cont))+
geom_point(shape=21,size=2, colour = "black", fill = "white",stroke=5)
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
ggplot(circ, aes( x = size_bp, y = coverage_cont))+
geom_point(aes(colour = "#DAF7A6"), size = 4) +
geom_point(colour = "#F7AE74", size = 1.5)
theme_bw() + theme(legend.position =c(0.15,0.85),legend.title = element_blank(),panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
ggplot(circ, aes( x = size_bp, y = coverage_cont))+
geom_point(shape=21, colour="#41C75C",fill = "#F7AE74", size = 4)
theme_bw() + theme(legend.position =c(0.15,0.85),legend.title = element_blank(),panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
ggplot(circ, aes( x = size_bp, y = coverage_cont))+
geom_point(shape=21, colour="#41C75C",fill = "#F7AE74", size = 4)+
theme_bw() + theme(legend.position =c(0.15,0.85),legend.title = element_blank(),panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
ggplot(circ, aes( x = size_bp, y = coverage_cont))+
geom_point(shape=16, colour="#41C75C",fill = "#F7AE74", size = 4)+
theme_bw() + theme(legend.position =c(0.15,0.85),legend.title = element_blank(),panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
ggplot(circ, aes( x = size_bp, y = coverage_cont))+
geom_point(shape=1, colour="#41C75C",fill = "#F7AE74", size = 4)+
theme_bw() + theme(legend.position =c(0.15,0.85),legend.title = element_blank(),panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
ggplot(circ, aes( x = size_bp, y = coverage_cont))+
geom_point()+
theme_bw() + theme(legend.position =c(0.15,0.85),legend.title = element_blank(),panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
ggplot(circ, aes( x = size_bp, y = coverage_cont))+
geom_point(colour="pink")+
theme_bw() + theme(legend.position =c(0.15,0.85),legend.title = element_blank(),panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
ggplot(circ, aes( x = size_bp, y = coverage_cont))+
geom_point(colour="#E84E84")+
geom_point(colour="white",size=0.5)
theme_bw() + theme(legend.position =c(0.15,0.85),legend.title = element_blank(),panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
ggplot(circ, aes( x = size_bp, y = coverage_cont))+
geom_point(colour="#E84E84")+
geom_point(colour="white",size=0.5)+
theme_bw() + theme(legend.position =c(0.15,0.85),legend.title = element_blank(),panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
ggplot(circ, aes( x = size_bp, y = coverage_cont))+
geom_point(colour="#E84E84")+
geom_point(colour="white",size=0.6)+
theme_bw() + theme(legend.position =c(0.15,0.85),legend.title = element_blank(),panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
shiny::runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
chr_imput <- circ %>% select(chr)%>% distinct() %>% arrange(chr)
# User interface
ui <- dashboardPage(
dashboardHeader(title = "Visual EccDNA"),
dashboardSidebar(
sidebarMenu(
menuItem("About",tabName="about",icon=icon("tasks")),
menuItem("Results", tabName ="results", icon=icon("bar-chart")),
menuItem("Filter","filter", icon=icon("filter")),
menuItem("Circle Info",tabName="circle",icon=icon("circle-o"))
)
),
dashboardBody(
tabItems(
tabItem(
tabName = "about",
fluidRow(
h2("Wellcome!")),
fluidRow(
box(title= "Upload a Circle BED file with output:",fileInput("bedfile","Choose file:"))
),
),
tabItem(
tabName = "results",
fluidRow(
valueBox(total_circles,tags$b("TOTAL DNA CIRCLES"), color="maroon",
icon = tags$i(class = "fas fa-dna", style="font-size: 50px")
),
box(width = 3,background = "olive",tags$h4("GOOD:",paste0(round(p_good,2),"%"))),
box(width = 3, background = "yellow",tags$h4("LOW:", paste0(round(p_low,2),"%"))),
box(width = 3, background = "light-blue",tags$h4("MEDIUM:",paste0(round(p_medium,2),"%"))),
box(width = 3, background = "red",tags$h4("BAD:", paste0(round(p_bad,2),"%"))),
),
fluidRow(
box(title = "Results", plotOutput("results"),width=7,
status = "primary",
),
box(title= span(icon("filter"), "Filters"), status = "warning", width = 5,
selectInput(inputId = "inputchr",
"By Chromosome:",
value = chr_input ))
),
),
tabItem(
tabName="circle",
h2("Here goes the info of each circle")
)
)
)
)
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
chr_choice
chr_choice
chr_choice <- circ %>% select(chr)%>% distinct() %>% arrange(chr)
chr_choice
str(chr_choice)
# User interface
ui <- dashboardPage(
dashboardHeader(title = "Visual EccDNA"),
dashboardSidebar(
sidebarMenu(
menuItem("About",tabName="about",icon=icon("tasks")),
menuItem("Results", tabName ="results", icon=icon("bar-chart")),
menuItem("Filter","filter", icon=icon("filter")),
menuItem("Circle Info",tabName="circle",icon=icon("circle-o"))
)
),
dashboardBody(
tabItems(
tabItem(
tabName = "about",
fluidRow(
h2("Wellcome!")),
fluidRow(
box(title= "Upload a Circle BED file with output:",fileInput("bedfile","Choose file:"))
),
),
tabItem(
tabName = "results",
fluidRow(
valueBox(total_circles,tags$b("TOTAL DNA CIRCLES"), color="maroon",
icon = tags$i(class = "fas fa-dna", style="font-size: 50px")
),
box(width = 3,background = "olive",tags$h4("GOOD:",paste0(round(p_good,2),"%"))),
box(width = 3, background = "yellow",tags$h4("LOW:", paste0(round(p_low,2),"%"))),
box(width = 3, background = "light-blue",tags$h4("MEDIUM:",paste0(round(p_medium,2),"%"))),
box(width = 3, background = "red",tags$h4("BAD:", paste0(round(p_bad,2),"%"))),
),
fluidRow(
box(title = "Results", plotOutput("results"),width=7,
status = "primary",
),
box(title= span(icon("filter"), "Filters"), status = "warning", width = 5,
selectInput(inputId = "inputchr",
"By source chromosome:",
choices = chr_input,
multiple = TRUE ),
)
),
),
tabItem(
tabName="circle",
h2("Here goes the info of each circle")
)
)
)
)
str(chr_choice)
chr_choices <- circ %>% select(chr)%>% distinct() %>% arrange(chr) %>%
add_row(chr="All",before=TRUE)
chr_choices <- circ %>% select(chr)%>% distinct() %>% arrange(chr) %>%
add_row(chr="All",before=TRUE)
chr_choices %>% add_row(chr="All",before=TRUE)
chr_choices <- circ %>% select(chr)%>% distinct() %>% arrange(chr)
chr_choices %>% add_row(chr="All",before=TRUE)
View(chr_choice)
all <- c("All")
chr_choices <- rbind(all,chr_choices)
View(chr_choices)
chr_choices <- circ$chr)
chr_choices <- circ$chr
chr_choices <- levels(circ$chr)
all <- "ALL"
append(chr_choices,all)
all <- "All"
append(chr_choices,all)
append(all,chr_choices)
chr_choices <- append(all,levels(circ$chr))
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
runApp()
runApp('C:/Users/ainho/eccDNA/Visual EccDNA')
shiny::runApp()
